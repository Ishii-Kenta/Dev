<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(SolutionDir)Template.Core\bin\Debug\Template.Core.dll" #>
<#@ import namespace="Template.Core" #>
<#@ import namespace="Template.Core.Generator" #>
<#@ import namespace="Template.Core.Info" #>
<#@ output extension=".txt" #>
<#
    ModelViewModelGenerator.CreateModels(this.Host.ResolvePath("Model定義.xlsx"), this.GenerationEnvironment, info =>
        {
#>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations;
<#        if (info.HasNameSpaces == true) { 
            foreach (var ns in info.NameSpaces) { #>
using <#=                    ns #>;
<#            }
        }#>
using T4SampleProject;
using T4SampleProject.ComponentModel;
using T4SampleProject.DataAnotations;

namespace T4SampleProject.Models
{
    /// <summary>
    /// <#= info.Comment #>
    /// </summary>
    /// <remarks>
    /// このファイルはT4テンプレートによって自動生成されたファイルです。
    /// このファイルを編集すると、アプリケーションの動作に影響をあたえる可能性があります。
    /// </remarks>
    /// <auto-generate />
    public partial class <#= info.TypeName #> : BindableBase
    {
<# if (info.HasDefined == true) { #>
        #region 定数

<#        foreach   (var defined in info.DefinedList){ #>
        /// <summary><#= defined.Comment #></summary>
        public const <#= defined.TypeName #> <#= defined.Name #> = <#= defined.Value #>;
<#        } #>

        #endregion //定数
<#        } #>

        #region メンバ

<#        foreach (var p in info.Properties) { #>
        /// <summary><#=                p.Comment #></summary>
<#            if (p.HasRemarks == true) { #>
        /// <remarks><#=                    p.Remarks #></remarks>
<#            }#>
        private <#= p.TypeName #> <#= p.FieldName #><# if (p.HasDefaultValue == true) { #> = <#= p.DefaultValue #><# } #>;

<#        } #>
        #endregion //メンバ

        #region プロパティ

<#        foreach (var p in info.Properties) { #>
        /// <summary><#=                p.Comment #></summary>
<#            if (p.HasRemarks == true) { #>
        /// <remarks><#=                    p.Remarks #></remarks>
<#            }#>
        [Display(Name = "<#= p.ItemName #>")]
<#            foreach (var attr in p.CheckAttributes) { #>
        <#= attr.AttributeText() #>
<#            }#>
        public <#= p.TypeName #> <#= p.Name #>
        {
            get { return <#= p.FieldName #>; }
            set { SetProperty<<#= p.TypeName #>>(ref <#= p.FieldName #>, value); }
        }

<#        }#>
        #endregion //プロパティ
    }
}
<#        }); #>